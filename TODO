### Coding a discord bot
‚úî Fork this repository and clone it locally @done(20-08-22 11:07)
‚òê Your first step will be to get the bot 'token'. If you don't know what that is yet, don't worry about it in the slightest, you will learn very soon. For this step, I want you to use google. Because this is the first step, I'll help you out, not that it's a complicated process at all. In fact, all you need to do is literally google 'how to make a discord bot'. That is all. Find an explanation that you can understand, and you will be able to get through this step. For reference, this is what I used to get started: https://www.writebots.com/how-to-make-a-discord-bot/#Python_The_Simple_Readable_Language_for_Your_Discord_Bot I think it's the first link after the google search lol.
‚òê Go to discord.py / discord.js documentation and follow the start-up instructions in the documentation. This is something you will do a lot as a dev, i.e, finding a package, going through the docs and figuring out how to set it up. There may even be a dummy project in the docs which can help you get started. While you are in this stage, DO NOT HESITATE to ask for help, even if it is the smallest thing. Although, it would be better if you tried googling your issue before. Getting good at googling is also a very important skill, plus, you will learn a very cool thing, i.e, figure out where your error is stemming from so you can google it to get a good solution. Reminder that googling can be intimidating at times, since some of the solutions will be very complex. Don't waste time dwelling on those, those do not matter. Take this from me, who still gets intimidated looking at Google solutions for problems I run into. Try finding a simple suitable one, try understanding it. If you don't, I'm here to help. If you can't find the answer on Google, I'm here to help once more.
‚òê Once you are able to complete the starter super basic project, well, good job! You're now done with all of the pre-requisites. Now you solve the problem. From my (admittedly limited) experience, I can assure you that coming to this stage, i.e, figuring out all the prerequisites to solving a problem / working on a project and getting a dummy version running on your computer is the most intimidating part of the development experience. Now we come to the fun part, where you actually get to think (and don't you for one second think you aren't capable of thinking, you are one super mega smart boo). One key reminder here is to use that mini-example thing from the docs as a reference, try to extrapolate whatever you see in that example code to match features you want to implement. This may sound obvious, but its a very very key step. So what I want you to do is very simple, and as follows:
    ‚òê You will create a JSON database, each key will be a User ID (this will be provided by discord), and the value will be a number. When you first initialize this database, just create a db.json file in the same directory as your bot code file, and in that db.json just type in an empty object, i.e, just an open and close curly braces.
    ‚òê Now, your bot will watch for a message consisting only of either a '+' or a '-' symbol. (Remember, extrapolate what you see in the example in the docs), and when you get that '+' or '-', you will first read your db.json file (just like reading a regular text file, you might have done this in C). Now, when you read this file, python (or javascript) will read it as one big string. You will then convert this string into a dictionary (or object in javascript). (If you don't know how to do this, remember, just straight up Google your enquiry. There is no shame in that, you are learning for the first time. You can also obviously ask me!). Once you have your dictionary/object, you will then check if the user who typed the message exists as a key in your database (once again, don't know how to check for existing keys? just Google, or ask me!), if the user key does not exist, just initialize the value for that key as 0, and then add or subtract 1 to it depending on '+' or '-', whatever was typed. If the user already exists, just update the value for that key (increment or decrement by 1). Once you have done this update, you will now revert the dictionary/object back to a string which you can store into the db.json file (You know what to do üòâ).
    ‚òê The next two features you will implement are very simple: whenever a user types in '%', you will make the bot reply with the value for that user, and whenever a user types in '?', you will reply with the ENTIRE database (all keys and values)
    ‚òê Yay! There's only one more feature left for your assignment. If you finish this you get something nice üòèüòè. Congrats on getting this far boooooo!!!!! I knew you could do itttttttt. Now, the final feature: Whenever a user's value goes less than zero, the bot will reply with 'your score is now negative', this reply should come only when the score goes from 0 to -1, not on subsequent decreases.

